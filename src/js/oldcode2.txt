'use strict';

//Variables

var cursors;

//'Clases'

    //Clase Collider y sus métodos
    var Collider = function (game, posX, posY) {
        Phaser.Sprite.call(this, game, posX, posY, 'tanque');
        this.anchor.setTo(0.5, 0.5);
        this.enableBody = true;
        this.physicsBodyType = Phaser.Physics.ARCADE;
        this.smoothed = false;
        this.scale.setTo(3, 3);
        game.add.existing(this);
    };

    Collider.prototype = Object.create(Phaser.Sprite.prototype);
    Collider.prototype.constructor = Collider;

    //Clase Block y sus métodos
    var Block = function (game, posX, posY){
        Collider.apply(this, [game, posX, posY]);
    }

    Block.prototype = Object.create(Collider.prototype);
    Block.prototype.constructor = Block;

    //Clase Movable y sus métodos
    var Movable = function (game, posX, posY, vel, dirX, dirY){
        Collider.apply(this, [game, posX, posY]);
        var col = new Collider();
        var velocidad = vel;
        var dx = dirX;
        var dy = dirY;
    }

    Movable.prototype = Object.create(Collider.prototype);
    Movable.prototype.constructor = Movable;

    //Clase Bullet y sus métodos
    var Bullet = function (game, posX, posY, vel, dirX, dirY){
        Movable.apply(this, [game, posX, posY, vel, dirX, dirY]);
    }

    Bullet.prototype = Object.create(Movable.prototype);
    Bullet.prototype.constructor = Bullet;

    //Clase Shooter y sus métodos
    var Shooter = function(game, posX, posY, vel, dirX, dirY){
        Movable.apply(this, [game, posX, posY, vel, dirX, dirY]);
    }

    Shooter.prototype = Object.create(Movable.prototype);
    Shooter.prototype.constructor = Shooter;

    //Clase Player y sus métodos
    var Player = function(game, posX, posY, vel, dirX, dirY, cursors){
        Shooter.apply(this, [game, posX, posY, vel, dirX, dirY]);
        this._cursors = cursors;
    }

    Player.prototype = Object.create(Shooter.prototype);
    Player.prototype.constructor = Player;

    Player.prototype.update = function(){
        // this.x = 0;
        // this.y = 0;

        if (this._cursors.left.isDown)
        {
            this.x -= this.velocidad;
            this.body.rotation = 270;
        }
        else if (this._cursors.right.isDown)
        {
            this.x += this.velocidad;
            this.body.rotation = 90;
        }
        else if (this._cursors.down.isDown)
        {
            this.y += this.velocidad;
            this.body.rotation = 180;
        }
        else if (this._cursors.up.isDown)
        {
            this.y -= this.velocidad;
            this.body.rotation = 0;
        }

        if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR))
        {
            this.fireBullet();
        }
    }

    Player.prototype.fireBullet = function(){

        if (game.time.now > bulletTime)
        {
            bullet = bullets.getFirstExists(false);

            if (bullet)
            {
                bullet.reset(sprite.x + 6, sprite.y - 8);
                bullet.body.velocity.y = -300;
                bulletTime = game.time.now + 150;
            }
        }

    }

    //Clase Enemy y sus métodos
    var Enemy = function(game, posX, posY, vel, dirX, dirY){
        Shooter.apply(this, [game, posX, posY, vel, dirX, dirY]);
    }

    Enemy.prototype = Object.create(Shooter.prototype);
    Enemy.prototype.constructor = Enemy;

//Game Code

var PlayScene={
    create: function(){
        this.game.stage.backgroundColor = '#2d2d2d';
        cursors = this.game.input.keyboard.createCursorKeys();

        var player = new Player(this.game, 500, 500, 10, 0, 1, cursors);
    },

    update: function(){
        this.game.physics.arcade.overlap(bullets, bloque, collisionHandler, null, this);
    }
}

module.exports = PlayScene;
